<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IdentityServer.WindowsAuthentication</name>
    </assembly>
    <members>
        <member name="T:IdentityServer.WindowsAuthentication.Logging.ILog">
            <summary>
            Simple interface that represent a logger.
            </summary>
        </member>
        <member name="M:IdentityServer.WindowsAuthentication.Logging.ILog.Log(IdentityServer.WindowsAuthentication.Logging.LogLevel,System.Func{System.String},System.Exception,System.Object[])">
            <summary>
            Log a message the specified log level.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="messageFunc">The message function.</param>
            <param name="exception">An optional exception.</param>
            <param name="formatParameters">Optional format parameters for the message generated by the messagefunc. </param>
            <returns>true if the message was logged. Otherwise false.</returns>
            <remarks>
            Note to implementers: the message func should not be called if the loglevel is not enabled
            so as not to incur performance penalties.
            
            To check IsEnabled call Log with only LogLevel and check the return value, no event will be written.
            </remarks>
        </member>
        <member name="T:IdentityServer.WindowsAuthentication.Logging.LogLevel">
            <summary>
            The log level.
            </summary>
        </member>
        <member name="T:IdentityServer.WindowsAuthentication.Logging.ILogProvider">
            <summary>
            Represents a way to get a <see cref="T:IdentityServer.WindowsAuthentication.Logging.ILog"/>
            </summary>
        </member>
        <member name="M:IdentityServer.WindowsAuthentication.Logging.ILogProvider.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference.</returns>
        </member>
        <member name="M:IdentityServer.WindowsAuthentication.Logging.ILogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="message">The message to add to the diagnostics context.</param>
            <returns>A disposable that when disposed removes the message from the context.</returns>
        </member>
        <member name="M:IdentityServer.WindowsAuthentication.Logging.ILogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
            Opens a mapped diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>A disposable that when disposed removes the map from the context.</returns>
        </member>
        <member name="T:IdentityServer.WindowsAuthentication.Logging.LogProvider">
            <summary>
            Provides a mechanism to create instances of <see cref="T:IdentityServer.WindowsAuthentication.Logging.ILog"/> objects.
            </summary>
        </member>
        <member name="F:IdentityServer.WindowsAuthentication.Logging.LogProvider.DisableLoggingEnvironmentVariable">
            <summary>
            The disable logging environment variable. If the environment variable is set to 'true', then logging
            will be disabled.
            </summary>
        </member>
        <member name="M:IdentityServer.WindowsAuthentication.Logging.LogProvider.SetCurrentLogProvider(IdentityServer.WindowsAuthentication.Logging.ILogProvider)">
            <summary>
            Sets the current log provider.
            </summary>
            <param name="logProvider">The log provider.</param>
        </member>
        <member name="M:IdentityServer.WindowsAuthentication.Logging.LogProvider.For``1">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <typeparam name="T">The type whose name will be used for the logger.</typeparam>
            <returns>An instance of <see cref="T:IdentityServer.WindowsAuthentication.Logging.ILog"/></returns>
        </member>
        <member name="M:IdentityServer.WindowsAuthentication.Logging.LogProvider.GetCurrentClassLogger">
            <summary>
            Gets a logger for the current class.
            </summary>
            <returns>An instance of <see cref="T:IdentityServer.WindowsAuthentication.Logging.ILog"/></returns>
        </member>
        <member name="M:IdentityServer.WindowsAuthentication.Logging.LogProvider.GetLogger(System.Type)">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <param name="type">The type whose name will be used for the logger.</param>
            <returns>An instance of <see cref="T:IdentityServer.WindowsAuthentication.Logging.ILog"/></returns>
        </member>
        <member name="M:IdentityServer.WindowsAuthentication.Logging.LogProvider.GetLogger(System.String)">
            <summary>
            Gets a logger with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>An instance of <see cref="T:IdentityServer.WindowsAuthentication.Logging.ILog"/></returns>
        </member>
        <member name="M:IdentityServer.WindowsAuthentication.Logging.LogProvider.OpenNestedConext(System.String)">
            <summary>
            Opens a nested diagnostics context.
            </summary>
            <param name="message">A message.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="M:IdentityServer.WindowsAuthentication.Logging.LogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
            Opens a mapped diagnostics context.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="P:IdentityServer.WindowsAuthentication.Logging.LogProvider.IsDisabled">
            <summary>
            Gets or sets a value indicating whether this is logging is disabled.
            </summary>
            <value>
            <c>true</c> if logging is disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer.WindowsAuthentication.Logging.LogProvider.OnCurrentLogProviderSet">
            <summary>
            Sets an action that is invoked when a consumer of your library has called SetCurrentLogProvider. It is 
            important that hook into this if you are using child libraries (especially ilmerged ones) that are using
            LibLog (or other logging abstraction) so you adapt and delegate to them.
            <see cref="M:IdentityServer.WindowsAuthentication.Logging.LogProvider.SetCurrentLogProvider(IdentityServer.WindowsAuthentication.Logging.ILogProvider)"/> 
            </summary>
        </member>
        <member name="P:IdentityServer.WindowsAuthentication.Logging.LogProviders.LoupeLogProvider.ProviderIsAvailableOverride">
            <summary>
            Gets or sets a value indicating whether [provider is available override]. Used in tests.
            </summary>
            <value>
            <c>true</c> if [provider is available override]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:IdentityServer.WindowsAuthentication.Logging.LogProviders.LoupeLogProvider.WriteDelegate">
            <summary>
            The form of the Loupe Log.Write method we're using
            </summary>
        </member>
        <member name="M:IdentityServer.WindowsAuthentication.Logging.LogProviders.LogMessageFormatter.SimulateStructuredLogging(System.Func{System.String},System.Object[])">
            <summary>
            Some logging frameworks support structured logging, such as serilog. This will allow you to add names to structured data in a format string:
            For example: Log("Log message to {user}", user). This only works with serilog, but as the user of LibLog, you don't know if serilog is actually 
            used. So, this class simulates that. it will replace any text in {curlybraces} with an index number. 
            
            "Log {message} to {user}" would turn into => "Log {0} to {1}". Then the format parameters are handled using regular .net string.Format.
            </summary>
            <param name="messageBuilder">The message builder.</param>
            <param name="formatParameters">The format parameters.</param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer.WindowsAuthentication.Configuration.SubjectType">
            <summary>
            Specifies which claim to use as a subject identifier
            </summary>
        </member>
        <member name="F:IdentityServer.WindowsAuthentication.Configuration.SubjectType.WindowsAccountName">
            <summary>
            The Windows account name
            </summary>
        </member>
        <member name="F:IdentityServer.WindowsAuthentication.Configuration.SubjectType.Sid">
            <summary>
            The Windows account SID
            </summary>
        </member>
        <member name="T:Owin.WindowsAuthenticationAppBuilderExtensions">
            <summary>
            Helper class for pipeline configuration
            </summary>
        </member>
        <member name="M:Owin.WindowsAuthenticationAppBuilderExtensions.UseWindowsAuthenticationService(Owin.IAppBuilder,IdentityServer.WindowsAuthentication.Configuration.WindowsAuthenticationOptions)">
            <summary>
            Extension method for adding the windows authentication service to the pipeline
            </summary>
            <param name="app">The app builder.</param>
            <param name="options">The options class.</param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer.WindowsAuthentication.Configuration.WindowsAuthenticationOptions">
            <summary>
            Configuration options
            </summary>
        </member>
        <member name="M:IdentityServer.WindowsAuthentication.Configuration.WindowsAuthenticationOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IdentityServer.WindowsAuthentication.Configuration.WindowsAuthenticationOptions"/> class.
            </summary>
        </member>
        <member name="P:IdentityServer.WindowsAuthentication.Configuration.WindowsAuthenticationOptions.IssuerUri">
            <summary>
            Gets or sets the issuer URI (defaults to urn:windowsauthentication)
            </summary>
            <value>
            The issuer URI.
            </value>
        </member>
        <member name="P:IdentityServer.WindowsAuthentication.Configuration.WindowsAuthenticationOptions.IssuerName">
            <summary>
            Gets or sets the name of the issuer name for the metadata document (defaults to 'Windows Authentication').
            </summary>
            <value>
            The name of the issuer.
            </value>
        </member>
        <member name="P:IdentityServer.WindowsAuthentication.Configuration.WindowsAuthenticationOptions.SigningCertificate">
            <summary>
            Gets or sets the signing certificate for the identity token.
            </summary>
            <value>
            The signing certificate.
            </value>
        </member>
        <member name="P:IdentityServer.WindowsAuthentication.Configuration.WindowsAuthenticationOptions.IdpRealm">
            <summary>
            Gets or sets the realm name of identityserver (defaults to urn:idsrv3).
            </summary>
            <value>
            The idp realm.
            </value>
        </member>
        <member name="P:IdentityServer.WindowsAuthentication.Configuration.WindowsAuthenticationOptions.IdpReplyUrl">
            <summary>
            Gets or sets the identityserver reply URL.
            </summary>
            <value>
            The idp reply URL.
            </value>
        </member>
        <member name="P:IdentityServer.WindowsAuthentication.Configuration.WindowsAuthenticationOptions.EnableWsFederationEndpoint">
            <summary>
            Gets or sets a value indicating whether the WS-Federation endpoint is enabled. Defaults to true.
            </summary>
            <value>
            <c>true</c> if the WS-Federation endpoint is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer.WindowsAuthentication.Configuration.WindowsAuthenticationOptions.EnableOAuth2Endpoint">
            <summary>
            Gets or sets a value indicating whether to enable the OAuth2 endpoint. Defaults to true.
            </summary>
            <value>
            <c>true</c> if the OAuth2 endpoint is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer.WindowsAuthentication.Configuration.WindowsAuthenticationOptions.EnableWsFederationMetadata">
            <summary>
            Gets or sets a value indicating whether the metadata endpoint is enabled.
            </summary>
            <value>
              <c>true</c> if you want to enable the metadata endoint; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer.WindowsAuthentication.Configuration.WindowsAuthenticationOptions.SubjectType">
            <summary>
            Gets or sets the type of the subject. Either the Windows account name or the SID can be used.
            </summary>
            <value>
            The type of the subject.
            </value>
        </member>
        <member name="P:IdentityServer.WindowsAuthentication.Configuration.WindowsAuthenticationOptions.EmitGroups">
            <summary>
            Gets or sets a value indicating whether the Windows groups of the user will be inclided in the token (default to false).
            </summary>
            <value>
              <c>true</c> if groups are emitted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer.WindowsAuthentication.Configuration.WindowsAuthenticationOptions.EmitWindowsAccountNameAsName">
            <summary>
            Gets or sets a value indicating whether to emit the Windows account name as a name claim.
            </summary>
            <value>
            <c>true</c> if you want to emit the Windows account name as name claim; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IdentityServer.WindowsAuthentication.Configuration.WindowsAuthenticationOptions.CustomClaimsProvider">
            <summary>
            Gets or sets custom claims transformation logic.
            </summary>
        </member>
        <member name="P:IdentityServer.WindowsAuthentication.Configuration.WindowsAuthenticationOptions.PublicOrigin">
            <summary>
            Gets or sets the public origin for the server (e.g. "https://yourserver:1234").
            </summary>
            <value>
            The name of the public origin.
            </value>
        </member>
        <member name="P:IdentityServer.WindowsAuthentication.Configuration.WindowsAuthenticationOptions.TokenLifeTime">
            <summary>
            Gets or sets the token life time (defaults to 60 mins).
            </summary>
            <value>
            The token life time.
            </value>
        </member>
        <member name="T:IdentityServer.WindowsAuthentication.Services.CustomClaimsProviderContext">
            <summary>
            Context describing incoming and outgoing identities.
            </summary>
        </member>
        <member name="P:IdentityServer.WindowsAuthentication.Services.CustomClaimsProviderContext.WindowsPrincipal">
            <summary>
            Incoming Windows user.
            </summary>
        </member>
        <member name="P:IdentityServer.WindowsAuthentication.Services.CustomClaimsProviderContext.OutgoingSubject">
            <summary>
            Claims identity containing all claims for outgoing token.
            </summary>
        </member>
        <member name="T:IdentityServer.WindowsAuthentication.Services.DefaultCustomClaimsProvider">
            <summary>
            Default custom claims provider implementation (nop)
            </summary>
        </member>
        <member name="T:IdentityServer.WindowsAuthentication.Services.ICustomClaimsProvider">
            <summary>
            Service for providing custom claims
            </summary>
        </member>
        <member name="M:IdentityServer.WindowsAuthentication.Services.ICustomClaimsProvider.TransformAsync(IdentityServer.WindowsAuthentication.Services.CustomClaimsProviderContext)">
            <summary>
            Claims transforms logic
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer.WindowsAuthentication.Services.DefaultCustomClaimsProvider.TransformAsync(IdentityServer.WindowsAuthentication.Services.CustomClaimsProviderContext)">
            <summary>
            Claims transforms logic
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
    </members>
</doc>
